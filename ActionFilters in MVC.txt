What are action filters in asp.net mvc?
Action filters are attributes that can be applied either on a controller action method or on a controller. 
When applied at the controller level, they are applicable for all actions within that controller. 
Action filters allow us to add, pre and post processing logic to an action method. This means, 
they allow us to modify the way in which an action is executed.

Name a few action filters in mvc:
Authorize 
ChildActionOnly
HandleError
OutputCache 
RequireHttps
ValidateInput
ValidateAntiForgeryToken

Authorize and AllowAnonymous action filters in mvc:
In ASP.NET MVC, by default, all the controller action methods are accessible to both anonymous and authenticated users. 
If you want action methods, to be available only for authenticated and authorised users, then use Authorize attribute.
If you want "SecureMethod" to be available only for authenticated users, then decorate it with "Authorize" attribute.
[Authorize]
To allow anonymous access to NonSecureMethod(), apply [AllowAnonymous] attribute. AllowAnonymous attribute is used to skip authorization enforced by Authorize attribute. 
[AllowAnonymous]


Childactiononly attribute in mvc:
1. Any action method that is decorated with [ChildActionOnly] attribute is a child action method.

2. Child action methods will not respond to URL requests. If an attempt is made, a runtime error will be thrown stating - Child action is accessible only by a child request.

3. Child action methods can be invoked by making child request from a view using "Action()" and "RenderAction()" html helpers.

4. An action method doesnâ€™t need to have [ChildActionOnly] attribute to be used as a child action, but use this attribute to prevent if you want to prevent 
the action method from being invoked as a result of a user request.

5. Child actions are typically associated with partial views, although this is not compulsory.

6. Child action methods are different from NonAction methods, in that NonAction methods cannot be invoked using Action() or RenderAction() helpers.

7. Using child action methods, it is possible to cache portions of a view. This is the main advantage of child action methods.


HandleError attribute in mvc:
We did not apply HandleError attribute anywhere. So how did all this work?
HandleErrorAttribute is added to the GlobalFilters collection in global.asax. When a filter is added to the GlobalFilters collection, 
then it is applicable for all controllers and their action methods in the entire application.
Right click on "RegisterGlobalFilters()" method in Global.asax, and select "Go To Definition" and you can find the code that adds "HandleErrorAttribute" to GlobalFilterCollection.

RequireHttps attribute in mvc:
[RequireHttps] attribute forces an unsecured HTTP request to be re-sent over HTTPS.
RequireHttps attribute can be applied on a controller as well. In this case, it is applicable for all action methods with in that controller.
Sensitive data such as login credentials, credit card information etc, must always be transmitted using HTTPS. Information transmitted over https is encrypted.

ValidateInput attribute in mvc:
This attribute is used to enable or disable request validation. By default, request validation is enabled in asp.net mvc. 
[ValidateInput(false)]: At this point, you should be able to submit comments, with HTML tags in it.

Custom filter Action:
There are five types of filters with ASP.NET MVC 5 and they are as follows.

1. Authorization Filter: It is performing before or after the validating the request.
2. Action Filter: It is performing before or after action method.
3. Result Filter: It is performing before or after the action result.
4. Exception Filter: It is executed if there is some exception thrown by application when performing action process. 
	It is used to show the error page or for logging error details.
	
It will inherit from ActionFilterAttribute class and also implement IActionFilter interface.
ActionFilterAttribute contains four important methods as in the following. 
we will inherit ActionFilterAttribute interface and for OnException we will inherit IExceptionFilter
OnActionExecuting: It is called just before the action method is going to call. [Authorize]
OnActionExecuted: It is called just after the action method is called. [Authorize]
OnResultExecuting: It is called just before the result is executed; it means before rendering the view. [OutputCache]
OnResultExecuted: It is called just after the result is executed, it means after rendering the view. [OutputCache]
OnException: It is called just before the result is executed. [HandleError]